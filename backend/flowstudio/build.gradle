plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'com.epages.restdocs-api-spec' version '0.18.4'
    id 'jacoco'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    jjwtVersion = "0.12.5"
    querydslVersion = "5.0.0:jakarta"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // LangChain4j
    implementation ('dev.langchain4j:langchain4j:0.35.0') {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-xml'
    }
    implementation ('dev.langchain4j:langchain4j-open-ai:0.35.0') {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-xml'
    }
    implementation ('dev.langchain4j:langchain4j-milvus:0.35.0') {
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-xml'
    }

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // API Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.4'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach{
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

clean {
    delete file(generated)
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect { fileTree(dir: it, exclude: [
                        '**/request/**',
                        '**/response/**',
                        '**/configuration/**',
                        '**/exception/**',
                        '**/ApiControllerAdvice.class',
                ]) })
        )
    }
}

openapi3 {
    servers = [
            { url = 'https://k11c201.p.ssafy.io' },
            { url = 'http://localhost:9090' }
    ]
    title = 'FlowStudio API'
    description = 'FlowStudio 문서입니다.'
    version = '1.0.0'
    outputDirectory = 'build/api-spec'
    outputFileNamePrefix = 'openapi3'
    format = 'yml'
}

tasks.register('openapi3-security-schemes') {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/${openapi3.outputFileNamePrefix}.${openapi3.format}")

        def securitySchemesContent = "  securitySchemes:\n" +
                "    APIKey:\n" +
                "      type: apiKey\n" +
                "      name: Authorization\n" +
                "      in: header\n" +
                "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"

        swaggerUIFile.append(securitySchemesContent)
    }
}
